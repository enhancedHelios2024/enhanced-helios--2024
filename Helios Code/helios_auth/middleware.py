
from django.utils.deprecation import MiddlewareMixin
from django.urls import resolve
from .signals import post_request_signal

class PostRequestMiddleware(MiddlewareMixin):
    def process_response(self, request, response):
        # Check if the response is generated by the specific view
        resolved_view = resolve(request.path_info)
        if resolved_view.func.__name__ == 'facial_recognition_verify':  # Change 'my_view' to your view function name
            # Trigger the signal only for the specific view
            post_request_signal.send(sender=self.__class__, request=request, response=response)
        return response

# import datetime
# from helios_auth.views import logout

# class SessionTimeoutMiddleware:
#     def __init__(self, get_response):
#         self.get_response = get_response
#         print("SessionTimeoutMiddleware")
#         # print(request.session.get('last_activity', None))
#         print('I AM IN MIDDLEWARE')

#     def __call__(self, request):
#         print("request user")
#         # print(request.session['authentication_step'])
#         if 'authentication_step' not in request.session:
#             print("does not exist")
#         elif request.session['authentication_step'] == 3:
#             print("SessionTimeoutMiddleware")
#             print(request.session.get('last_activity', None))
#             print('I AM IN MIDDLEWARE')
#             current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
#             last_activity = request.session.get('last_activity', None)
#             if last_activity:
#                 last_activity = datetime.datetime.strptime(last_activity, '%Y-%m-%d %H:%M:%S')
#                 if (datetime.datetime.now() - last_activity).seconds > 30: # 30 seconds = timeout duration
#                     logout(request)
#             request.session['last_activity'] = current_time
#         response = self.get_response(request)
#         return response